// limpa variável
operation clear(A){
 1: if zero A then goto 0 else goto 2
 2: do dec A goto 1
}

// A:=A+B (soma destrutiva)
operation soma(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A:=A+B (soma não-destrutiva)
operation soma(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do inc A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=B (atribuição destrutiva)
operation load(A,B){
  1: do clear(A) goto 2
  2: do soma(A,B) goto 0
}

// A:=B usando C (atribuição não-destrutiva)
operation load(A,B,C){
  1: do clear(A) goto 2
  2: do soma(A,B,C) goto 0
}

// A:=A div 2 usando C (divisão inteira por 2)
operation div2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: do inc A goto 2
}

// A divisivel_por_2 usando C (teste se multiplo de 2)
test divBy2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 2
}


// dado o número natural 2^a(2b + 1) armazenado
// em P e que codifica o par (a, b), a operação
// extrai a primeira coordenada e armazena em FST,
// extrai a segunda coordenada e armazena em SND;
// o valor original de P é perdido
operation decodificapar(P,FST,SND,AUX){
  1: if divBy2(P,AUX) then goto 2 else goto 4
  2: do div2(P,AUX) goto 3
  3: do inc FST goto 1
  4: do dec P goto 5
  5: do div2(P,AUX) goto 6
  6: do load(SND,P) goto 0
}

// A:=A div 3 usando C (divisão inteira por 3)
operation div3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: if zero C then goto 0 else goto 7
  7: do dec C goto 8
  8: do inc A goto 2
}

// A divisivel_por_3 usando C (teste se múltiplo de 3)
test divBy3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 8
  8: if zero C then goto false else goto 9
  9: do dec C goto 10
 10: do inc A goto 2
}

// A:=snd(B) usando C,D (extrai o segundo componente do par)
operation snd(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy3(C,D) then goto 4 else goto 6
  4: do div3(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}


test menorque(A,B,COPIA_A,COPIA_B,AUX){
  1: do load(COPIA_A,A,AUX) goto 2
  2: do load(COPIA_B,B,AUX) goto 3
  3: if zero COPIA_B then goto 7 else goto 4
  4: if zero COPIA_A then goto 9 else goto 5
  5: do dec COPIA_A goto 6
  6: do dec COPIA_B goto 3
  7: do clear(COPIA_A) goto 8
  8: do clear(COPIA_B) goto false
  9: do clear(COPIA_A) goto 10
  10: do clear(COPIA_B) goto true
}

test maiorque(A,B,COPIA_A,COPIA_B,AUX){
  1: if menorque(B,A,COPIA_A,COPIA_B,AUX) then goto true else goto false
}

operation multiplyAB(A,B){
   // verifica se A e B sao zero
   1: if zero A then goto 13 else goto 2
   2: if zero B then goto 13 else goto 3
   // Cria copias de A e B
   3: do load(A_COPY, A, AUX_A_COPY) goto 4
   4: do load(B_COPY, B, AUX_B_COPY) goto 6
   // loop B
   6: do load(ITERATOR_B, B_COPY, AUX_ITERATOR) goto 7
   7: do dec ITERATOR_B goto 8
   // loop A
   8: do load(ITERATOR_A, A_COPY, AUX_ITERATOR) goto 9
   9: do dec ITERATOR_A goto 10
  10: do inc RESULT goto 11
  11: if zero ITERATOR_A then goto 12 else goto 9
   // end loop A
  12: if zero ITERATOR_B then goto 0 else goto 7
   // end loop B
   // retorna 0
  13: do add RESULT 0 goto 0
}

operation findQuotient(A,B){
  1: do inc QUOTIENT goto 2
  2: do clear(REMAINDER) goto 3
  3: do multiplyAB(B, QUOTIENT) goto 4
  4: if maiorque(RESULT, A, COPY_RESULT, COPY_A,AUX3) then goto 5 else goto 1
  5: do dec QUOTIENT goto 6
}

operation subtract(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do dec A goto 1
}

operation divide(A,B,C,D){
  1: do inc C goto 2
  2: do load(B,D) goto 3
  3: do load(A, AUX_A) goto 4
  4: do load(B, AUX_B) goto 5
  5: do multiplyAB(AUX_A, AUX_B) goto 6
  6: if menorque(A,RESULT,AUX4, AUX5, AUX6) then goto 7 else goto 1
  7: do dec C goto 6
}

// Programa principal
main {
  1: do decodificapar(X,FST,SND,AUX) goto 2
  2: do findQuotient(SND,FST) goto 3
  3: do load(Y, RESULT) goto 0
}  
